
	Bash Training

	2. Basic functions
	2.1. Environment
	2.2. history, reverse search in history
	2.3. Command completion
	2.4. Command prompt
	2.5. Aliases
	2.6. Working with the command line

	2. Basic functions
	
	2.1. Environment
	Какво е това нещо Environment(среда) на shell-a. Тъй като доста програми включително и bash имат нужда от спесифична информация за системата и как дадена информация да бъде представена или къде да бъде търсена, се е наложило да се създаде начин за предаване на тази информация към всички програми и това се нарича shell среда. В една shell среда се виждат неща като пътят до директориите в който bash ще търси, езикът на който ще се извеждат съобщенията, как ще се контролират процесите стартирани от bash и много други неща. Дефакто без такава shell среда, работата ви щеше да бъде немислима дори и с наличието на самият shell. Без дефинирани променливи като PATH и PS1 работата ви ще е все едно се намирате на компютър от 80-те. Промяна на тези и други променливи от вашата shell среда може да улесни много работата ви. По-надолу ще разгледаме част от тези променлвиви. За да видите текущо дефинираните променливи се използва командата export. Със същата тази команда можете и да промените или създадете променлива.

	2.2. history, reverse search in history
	History-то на Bash се пази във файл .bash_hostory който се намира във home директорията на потребителя. Ако потребителя няма дефинирана home директория то този файл се създава във /.
	Както много други части на bash и history може да се настройва така както ви е удобно. Може да променяте колко команди назад да пази посредством променливата HISTSIZE, в тази променлива записвате едно число което представлява броя на командите които history ще пази. Други променливи са:

	HISTFILE - името на файлът в който се пазят командите прочетени от shell parser-а
	HISTFILESIZE - максимум брой линии които могат да бъдат записани във HISTFILE
	HISTTIMEFORMAT - формата на времето което да се показва във HISTFILE
	HISTIGNORE - точно кои команди да се запазват във HISTFILE
	HISTCONTROL - малко по-мек контрол върху нещата които може да пазите в HISTFILE

	В history-то се търси лесно като натиснете CTRL+r на командния ред и всичко което въвеждате се използва като стринг по който се търси в обратен ред в history файлът. Ако все пак искате да търсите в нормален ред от най-старите към най-новите команди то можете да исползвате CTRL+s.

	2.3. command completion
	Както знаете bash ви дава една много приятна опция наречена command completion, но какво представлява тя? Когато натиснете tab и не сте написали нищо на реда bash претърсва всички директории които са описани във PATH и ако командите които намери са повече от 100 на брой ви пита дали искате да видите всички тях. Ако напишете буква и натиснете tab то вие ефективно ограничавате списъка на тези команди до тези започващи със съответната буква и тн. докато не ви се изведе командата която искате. Bash НЕ търси в текущата директория, затова ако искате да стартирате файл от текущата директория трябва да добавите ./ пред името му. И като споменах файлове, те също се възползват от тази функционалност на bash. Идеята е проста, когато напишете команда или просто някакъв стринг и след него добавите интервал, вие вече не търсите команди а файлове които да подадете на тези команди. Съответно bash започва да търси от текущата директория в която се намирате.

	2.4. Command prompt
	Какво е command prompt-a(CMD prompt)? Това е текстът който се изписва в началото на всеки ред. При bash имаме дефинирани 4 промпта които се използват постоянно, като 2 от тях са най-често срещаните. CMD prompt-а те се дефинират в променливите PS1, PS2, PS3 & PS4.
		PS1 - това е промптът който виждате винаги на екрана, когато въвеждате команда
		PS2 - това е промптът който се вижда когато вторичен в случай, че въвеждате команда по-дълга от един ред
		PS3 - този промпт се използва за вградената в bash команда select
		PS4 - този промпт се използва когато bash изпълнява скрипт в debug режим(-x)
	стандартните стойности на тези променливи са:
		PS1='\u@\h:\w\$ '
		PS2='> '
		PS3=''
		PS4='+ '

	Във всеки промпт можете да сложите различни escape последователности които да дават различна информация. Дори можете да добавите команди които да се изпълняват всеки път когато натиснете enter. Ще обясня само най-поростите 4 неща които се използват в стандартният PS1 промпт:
		\u - current login username
		\h - machine hostname
		\w - current working directory
		\$ - shell type(user/root)
	Общият брой на escape последователностите които можете да слагате във промпт-а е 27 без да включвам, че можете да добавяте и изхода от дадена команда във промпт-а си.

	2.5. Aliases
	Какво е алиас? Това е логическа връзка подобно на symlinc, между едно име и дадено описание. Когато се дефинира един алиас той остава "жив" до момента в който вие напуснете този shell. Алиасите се дефинират относително лесно използвайки вградената в bash команда alias:
		alias dir='ls -l'
	Редът по-горе дефинира алиас който се казва dir и когато dir бъде извикана, на нейно място ще бъде изпълнена командата ls -l. Забележете, че в алиасите можете да описвате и допълнителните ключове които искате да добавяте към командите. Един по-полезен алиас би бил този:
		alias catfile='[ -f $1 ] && gcc $1'
	Този алиас би проверил за наличието на файлът подаден като първи аргумент на catfile и само ако той съществува би изпълнил командата cat въху него. По този начин се опитвам да ви покажа, как алиасите могат да приемат и аргументи вътре в себе си.

	2.6. Working with the command line
	Неща които навярно незнаете за command line-a(cmd line). Bash поддържа освен стандартните знаци за заместване( * , ? ) и възможност за ограничено използване на регулярни изрази. Изрази от типа .*[1-9] биха хванали всички файлове които завърват с разширения от .1, .2.... до .9. По същият начин можете да описвате и букви.
		